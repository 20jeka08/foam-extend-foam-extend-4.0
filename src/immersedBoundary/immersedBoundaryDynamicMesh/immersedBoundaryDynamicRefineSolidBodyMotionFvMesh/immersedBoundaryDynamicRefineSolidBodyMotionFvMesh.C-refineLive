/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     | Version:     4.1
    \\  /    A nd           | Web:         http://www.foam-extend.org
     \\/     M anipulation  | For copyright notice see file Copyright
-------------------------------------------------------------------------------
License
    This file is part of foam-extend.

    foam-extend is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation, either version 3 of the License, or (at your
    option) any later version.

    foam-extend is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with foam-extend.  If not, see <http://www.gnu.org/licenses/>.

\*---------------------------------------------------------------------------*/

#include "immersedBoundaryDynamicRefineSolidBodyMotionFvMesh.H"
#include "addToRunTimeSelectionTable.H"
#include "volFields.H"
#include "surfaceFields.H"
#include "fvCFD.H"
#include "syncTools.H"
#include "pointFields.H"
#include "directTopoChange.H"
#include "immersedBoundaryPolyPatch.H"
#include "cellSet.H"

// * * * * * * * * * * * * * * Static Data Members * * * * * * * * * * * * * //

namespace Foam
{

defineTypeNameAndDebug
(
    immersedBoundaryDynamicRefineSolidBodyMotionFvMesh,
    0
);

addToRunTimeSelectionTable
(
    dynamicFvMesh,
    immersedBoundaryDynamicRefineSolidBodyMotionFvMesh,
    IOobject
);

} // End namespace Foam


// * * * * * * * * * * * * * Private Member Functions  * * * * * * * * * * * //

Foam::label Foam::immersedBoundaryDynamicRefineSolidBodyMotionFvMesh::count
(
    const PackedBoolList& l,
    const unsigned int val
)
{
    label n = 0;
    forAll (l, i)
    {
        if (l.get(i) == val)
        {
            n++;
        }

        // debug also serves to get-around Clang compiler trying to optimise
        // out this forAll loop under O3 optimisation

        if (debug)
        {
            Info<< "n=" << n << endl;
        }
    }

    return n;
}


Foam::autoPtr<Foam::mapPolyMesh>
Foam::immersedBoundaryDynamicRefineSolidBodyMotionFvMesh::refine
(
    const labelList& cellsToRefine
)
{
    // Mesh changing engine.
    directTopoChange meshMod(*this);

    // Play refinement commands into mesh changer.
    meshCutter_.setRefinement(cellsToRefine, meshMod);

    // Create mesh (with inflation), return map from old to new mesh.
    //autoPtr<mapPolyMesh> map = meshMod.changeMesh(*this, true);
    autoPtr<mapPolyMesh> map = meshMod.changeMesh(*this, false);

    Info<< "Refined from "
        << returnReduce(map().nOldCells(), sumOp<label>())
        << " to " << globalData().nTotalCells() << " cells." << endl;

    if (debug)
    {
        // Check map.
        for (label faceI = 0; faceI < nInternalFaces(); faceI++)
        {
            label oldFaceI = map().faceMap()[faceI];

            if (oldFaceI >= nInternalFaces())
            {
                FatalErrorIn
                (
                    "immersedBoundaryDynamicRefineSolidBodyMotionFvMesh::"
                    "refine(const labelList&)"
                )   << "New internal face:" << faceI
                    << " fc:" << faceCentres()[faceI]
                    << " originates from boundary oldFace:" << oldFaceI
                    << abort(FatalError);
            }
        }
    }


    // Update fields
    updateMesh(map);

    // Update numbering of cells/vertices.
    meshCutter_.updateMesh(map);

    // Debug: Check refinement levels (across faces only)
    meshCutter_.checkRefinementLevels(-1, labelList(0));

    return map;
}


Foam::autoPtr<Foam::mapPolyMesh>
Foam::immersedBoundaryDynamicRefineSolidBodyMotionFvMesh::unrefine
(
    const labelList& splitPoints
)
{
    directTopoChange meshMod(*this);

    // Play refinement commands into mesh changer.
    meshCutter_.setUnrefinement(splitPoints, meshMod);

    // Save information on faces that will be combined
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    // Find the faceMidPoints on cells to be combined.
    // for each face resulting of split of face into four store the
    // midpoint
    Map<label> faceToSplitPoint(3*splitPoints.size());

    {
        forAll (splitPoints, i)
        {
            label pointI = splitPoints[i];

            const labelList& pEdges = pointEdges()[pointI];

            forAll (pEdges, j)
            {
                label otherPointI = edges()[pEdges[j]].otherVertex(pointI);

                const labelList& pFaces = pointFaces()[otherPointI];

                forAll (pFaces, pFaceI)
                {
                    faceToSplitPoint.insert(pFaces[pFaceI], otherPointI);
                }
            }
        }
    }

    // Change mesh and generate map.
    autoPtr<mapPolyMesh> map = meshMod.changeMesh(*this, false);

    Info<< "Unrefined from "
        << returnReduce(map().nOldCells(), sumOp<label>())
        << " to " << globalData().nTotalCells() << " cells."
        << endl;

    // Update fields
    updateMesh(map);

    // Update numbering of cells/vertices.
    meshCutter_.updateMesh(map);

    // Debug: Check refinement levels (across faces only)
    meshCutter_.checkRefinementLevels(-1, labelList(0));

    return map;
}


Foam::labelList
Foam::immersedBoundaryDynamicRefineSolidBodyMotionFvMesh::
selectRefineCells
(
    const label maxCells,
    const label maxRefLevel,
    const scalar refinementDistance,
    PackedBoolList& candidateCell
) const
{
    // Calculate distance to immersed boundary
    // Note: minimum distance is inside (WET) and implies a live cell
    scalarField cellDistance(nCells(), -GREAT);

    const vector span(GREAT, GREAT, GREAT);

    forAll (boundaryMesh(), patchI)
    {
        if (isA<immersedBoundaryPolyPatch>(boundaryMesh()[patchI]))
        {
            const immersedBoundaryPolyPatch& ibPatch =
                refCast<const immersedBoundaryPolyPatch>
                (
                    boundaryMesh()[patchI]
                );

            // Create a distance function
            triSurfaceDistance tsd
            (
                ibPatch.triSurfSearch(),
                span,
                ibPatch.internalFlow(),
                false                     // Do not iterate
            );

            // Calculate distance
            cellDistance = Foam::max
            (
                cellDistance,
                tsd.distance(cellCentres())
            );
        }
    }

    Info<< "Cell distance: " << min(cellDistance) << " " << max(cellDistance) << endl;

    // Create a sorting criterion
    forAll (cellDistance, cellI)
    {
        if
        (
             cellDistance[cellI] > -refinementDistance
           && cellDistance[cellI] < 0
        )
        {
            // Found a refinement cell
            candidateCell.set(cellI, 1);
        }
    }

    // Note: Assuming predominantly hex mesh, i.e. every refined cell causes 7
    // extra cells. This might lead to slight over shoot of maximum number of
    // cells.
    label nTotToRefine = (maxCells - globalData().nTotalCells())/7;

    const labelList& cellLevel = meshCutter_.cellLevel();

    // Count current selection
    label nCandidates = returnReduce(count(candidateCell, 1), sumOp<label>());

    // Collect all cells
    dynamicLabelList candidates(nCells());

    if (nCandidates < nTotToRefine)
    {
        // We won't exceed the maximum number of cells. Collect all candidate
        // cells that have refinement level smaller than max level
        forAll (candidateCell, cellI)
        {
            if
            (
                cellLevel[cellI] < maxRefLevel
             && candidateCell.get(cellI) == 1
            )
            {
                candidates.append(cellI);
            }
        }
    }
    else
    {
        // We will exceed the maximum number of cells. Simply truncate the
        // list. It is possible to prefer certain cells based on error field.
        for (label level = 0; level < maxRefLevel; level++)
        {
            forAll (candidateCell, cellI)
            {
                if
                (
                    cellLevel[cellI] == level
                 && candidateCell.get(cellI) == 1
                )
                {
                    candidates.append(cellI);
                }
            }

            if (returnReduce(candidates.size(), sumOp<label>()) > nTotToRefine)
            {
                break;
            }
        }
    }

    // Guarantee 2:1 refinement after refinement
    labelList consistentSet
    (
        meshCutter_.consistentRefinement
        (
            candidates.shrink(),
            true               // Add to set to guarantee 2:1
        )
    );

    Info<< "Selected " << returnReduce(consistentSet.size(), sumOp<label>())
        << " cells for refinement out of " << globalData().nTotalCells()
        << "." << endl;

    return consistentSet;
}


Foam::labelList
Foam::immersedBoundaryDynamicRefineSolidBodyMotionFvMesh::selectUnrefinePoints
(
    const scalar coarsenDistance,
    const PackedBoolList& markedCell
) const
{
    // All points that can be unrefined
    const labelList splitPointLabels = meshCutter_.getSplitPoints();

    // Get split points from all points
    pointField splitPoints(points(), splitPointLabels);

    // Calculate distance to immersed boundary
    // Note: minimum distance is inside (WET) and implies a live cell
    scalarField splitPointDistance(splitPoints.size(), -GREAT);

    const vector span(GREAT, GREAT, GREAT);

    forAll (boundaryMesh(), patchI)
    {
        if (isA<immersedBoundaryPolyPatch>(boundaryMesh()[patchI]))
        {
            const immersedBoundaryPolyPatch& ibPatch =
                refCast<const immersedBoundaryPolyPatch>
                (
                    boundaryMesh()[patchI]
                );

            // Create a distance function
            triSurfaceDistance tsd
            (
                ibPatch.triSurfSearch(),
                span,
                ibPatch.internalFlow(),
                false                     // Do not iterate
            );

            // Calculate distance
            splitPointDistance = Foam::max
            (
                splitPointDistance,
                tsd.distance(splitPoints)
            );
        }
    }

    Info<< "Split point distance: " << min(splitPointDistance) << " " << max(splitPointDistance) << endl;

    dynamicLabelList newSplitPoints(splitPointLabels.size());

    const labelListList& pc = pointCells();

    // Only checking split points
    forAll (splitPointLabels, pointI)
    {
        // Coarse live cells next to immersed boundary or dead cells
        if
        (
            splitPointDistance[pointI] < -coarsenDistance
         || splitPointDistance[pointI] > SMALL
        )
        {
            // Check that all cells are not marked
            const labelList& pCells = pc[splitPointLabels[pointI]];

            bool hasMarked = false;

            forAll (pCells, pCellI)
            {
                if (markedCell.get(pCells[pCellI]) == 1)
                {
                    hasMarked = true;
                    break;
                }
            }

            if (!hasMarked)
            {
                newSplitPoints.append(splitPointLabels[pointI]);
            }
        }
    }

    newSplitPoints.shrink();

    // Guarantee 2:1 refinement after unrefinement
    labelList consistentSet
    (
        meshCutter_.consistentUnrefinement
        (
            newSplitPoints,
            false
        )
    );

    Info<< "Selected " << returnReduce(consistentSet.size(), sumOp<label>())
        << " split points out of a possible "
        << returnReduce(splitPointLabels.size(), sumOp<label>())
        << "." << endl;

    return consistentSet;
}


void Foam::immersedBoundaryDynamicRefineSolidBodyMotionFvMesh::extendMarkedCells
(
    PackedBoolList& markedCell
) const
{
    // Mark faces using any marked cell
    boolList markedFace(nFaces(), false);

    forAll (markedCell, cellI)
    {
        if (markedCell.get(cellI) == 1)
        {
            const cell& cFaces = cells()[cellI];

            forAll (cFaces, i)
            {
                markedFace[cFaces[i]] = true;
            }
        }
    }

    syncTools::syncFaceList(*this, markedFace, orEqOp<bool>(), false);

    const labelList& own = faceOwner();
    const labelList& nei = faceNeighbour();

    // Update cells using any markedFace
    for (label faceI = 0; faceI < nInternalFaces(); faceI++)
    {
        if (markedFace[faceI])
        {
            markedCell.set(own[faceI], 1);
            markedCell.set(nei[faceI], 1);
        }
    }

    for (label faceI = nInternalFaces(); faceI < nFaces(); faceI++)
    {
        if (markedFace[faceI])
        {
            markedCell.set(own[faceI], 1);
        }
    }
}


// * * * * * * * * * * * * * * * * Constructors  * * * * * * * * * * * * * * //

Foam::immersedBoundaryDynamicRefineSolidBodyMotionFvMesh::
immersedBoundaryDynamicRefineSolidBodyMotionFvMesh(const IOobject& io)
:
    dynamicFvMesh(io),
    ibMotions_(),
    meshCutter_(*this),
    curTimeIndex_(-1),
    nRefinementIterations_(0)
{
    // Read motion function for all regions
    dictionary dynamicMeshCoeffs
    (
        IOdictionary
        (
            IOobject
            (
                "dynamicMeshDict",
                time().constant(),
                *this,
                IOobject::MUST_READ,
                IOobject::NO_WRITE
            )
        ).subDict(typeName + "Coeffs")
    );

    PtrList<entry> motionDicts(dynamicMeshCoeffs.lookup("motionFunctions"));

    ibMotions_.setSize(motionDicts.size());

    forAll (motionDicts, mI)
    {
        ibMotions_.set
        (
            mI,
            new movingImmersedBoundary
            (
                motionDicts[mI].keyword(),
                *this,
                motionDicts[mI].dict()
            )
        );
    }
}


// * * * * * * * * * * * * * * * * Destructor  * * * * * * * * * * * * * * * //

immersedBoundaryDynamicRefineSolidBodyMotionFvMesh::
~immersedBoundaryDynamicRefineSolidBodyMotionFvMesh()
{}


// * * * * * * * * * * * * * * * Member Functions  * * * * * * * * * * * * * //

bool immersedBoundaryDynamicRefineSolidBodyMotionFvMesh::update()
{
    // Handling multiple calls in a single time step
    if (curTimeIndex_ == this->time().timeIndex())
    {
        // This is not the first call to update, simply return false
        return false;
    }

    // Re-read dictionary. Choosen since usually -small so trivial amount
    // of time compared to actual refinement. Also very useful to be able
    // to modify on-the-fly.
    dictionary refineDict
    (
        IOdictionary
        (
            IOobject
            (
                "dynamicMeshDict",
                time().constant(),
                *this,
                IOobject::MUST_READ,
                IOobject::NO_WRITE,
                false
            )
        ).subDict(typeName + "Coeffs")
    );

    label refineInterval = readLabel(refineDict.lookup("refineInterval"));
    const label maxRefLevel = readLabel(refineDict.lookup("maxRefLevel"));
    const label maxCells = readLabel(refineDict.lookup("maxCells"));

    if (refineInterval < 0)
    {
        WarningIn
        (
            "immersedBoundaryDynamicRefineSolidBodyMotionFvMesh::update()"
        )   << "Illegal refineInterval " << refineInterval << nl
            << "The refineInterval setting in the dynamicMeshDict should"
            << " be >= 1." << nl
            << exit(FatalError);
    }

    if (maxCells <= 0)
    {
        WarningIn
        (
            "immersedBoundaryDynamicRefineSolidBodyMotionFvMesh::update()"
        )   << "Illegal maximum number of cells " << maxCells << nl
            << "The maxCells setting in the dynamicMeshDict should"
            << " be > 0." << nl
            << exit(FatalError);
    }

    if (maxRefLevel <= 0)
    {
        WarningIn
        (
            "immersedBoundaryDynamicRefineSolidBodyMotionFvMesh::update()"
        )   << "Illegal maximum refinement level " << maxRefLevel << nl
            << "The maxCells setting in the dynamicMeshDict should"
            << " be > 0." << nl
            << exit(FatalError);
    }

    // Move points based on new motion
    if (curTimeIndex_ < this->time().timeIndex())
    {
        // Grab old volumes before moving the mesh
        // This MUST be followed by mesh motion.  HJ, 29/Dec/2017
        setV0();

        curTimeIndex_ = this->time().timeIndex();
    }

    forAll (ibMotions_, ibI)
    {
        ibMotions_[ibI].movePoints();
    }

    bool hasChanged = false;

    if
    (
        time().timeIndex() > 0
     && refineInterval > 0
     && maxCells > 1
     && maxRefLevel > 0
     && time().timeIndex() % refineInterval == 0)
    {
        const scalar coarseningDistance =
            readScalar(refineDict.lookup("coarseningDistance"));

        const scalar refinementDistance =
            readScalar(refineDict.lookup("refinementDistance"));

        const label nBufferLayers =
            readLabel(refineDict.lookup("nBufferLayers"));

        // Note:
        // Positive cell distance implies a dead cell: coarsen if possible
        // Negative cell distance implies live cell
        // For negative distance greater than -refinementDistance, refine
        // For neegative distance smaller than -coarseningDistance, coarsen

        // Cells marked for refinement or otherwise protected from unrefinement.
        PackedBoolList refineCell(nCells());

        if (globalData().nTotalCells() < maxCells)
        {
            // Determine candidates for refinement
            labelList cellsToRefine =
                selectRefineCells
                (
                    maxCells,
                    maxRefLevel,
                    refinementDistance,
                    refineCell
                );

            label nCellsToRefine = returnReduce
            (
                cellsToRefine.size(),
                sumOp<label>()
            );

            if (nCellsToRefine > 0)
            {
                // Refine/update mesh and map fields
                autoPtr<mapPolyMesh> map = refine(cellsToRefine);

                // Update refineCell. Note that some of the marked ones have
                // not been refined due to constraints.
                {
                    const labelList& cellMap = map().cellMap();
                    const labelList& reverseCellMap = map().reverseCellMap();

                    PackedBoolList newRefineCell(cellMap.size());

                    forAll (cellMap, cellI)
                    {
                        label oldCellI = cellMap[cellI];

                        if (oldCellI < 0)
                        {
                            newRefineCell.set(cellI, 1);
                        }
                        else if (reverseCellMap[oldCellI] != cellI)
                        {
                            newRefineCell.set(cellI, 1);
                        }
                        else
                        {
                            newRefineCell.set(cellI, refineCell.get(oldCellI));
                        }
                    }

                    refineCell.transfer(newRefineCell);
                }

                // Extend with a buffer layer to prevent neighbouring points
                // being unrefined.
                for (label i = 0; i < nBufferLayers; i++)
                {
                    extendMarkedCells(refineCell);
                }

                hasChanged = true;
            }
        }

        // Coarsening
        {
            // Select unrefineable points that are not marked in refineCell
            labelList pointsToUnrefine =
                selectUnrefinePoints
                (
                    coarseningDistance,
                    refineCell
                );

            label nSplitPoints = returnReduce
            (
                pointsToUnrefine.size(),
                sumOp<label>()
            );

            if (nSplitPoints > 0)
            {
                // Refine/update mesh
                unrefine(pointsToUnrefine);

                hasChanged = true;
            }
        }


        if ((nRefinementIterations_ % 10) == 0)
        {
            // Compact refinement history occassionally (how often?).
            // Unrefinement causes holes in the polyRefinementHistory.
            const_cast<polyRefinementHistory&>
            (
                meshCutter().history()
            ).compact();
        }

        nRefinementIterations_++;
    }

    changing(hasChanged);

    if (!hasChanged)
    {
        fvMesh::syncUpdateMesh();
    }

    // Execute dummy mesh motion for the background mesh
    const pointField oldPoints = allPoints();
    fvMesh::movePoints(oldPoints);

    return true;
}


// ************************************************************************* //
